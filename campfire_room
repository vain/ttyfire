#!/usr/bin/env python2

import pyfire
import os
import sys
import textwrap
import re
import datetime
import time

def message_to_local(message):
    when = message.get_data()["created_at"]
    return when - datetime.timedelta(seconds=time.timezone)

def show(message, processed):
    print "%s%s%s %s%s%s%s %s" % (
                        C["bold"], C["black"],
                        message_to_local(message).strftime("%F"),
                        C["reset"], C["bold"],
                        message_to_local(message).strftime("%T"),
                        C["reset"],
                        processed)

def colored_name(user):
    modhash = sum([ord(i) for i in list(user)]) % len(NICK_COLORS)
    return "%s%s%s" % (C[NICK_COLORS[modhash]], user, C["reset"])

def trim_len(text, maxlen=12):
    if len(text) >= maxlen:
        text = text[:maxlen - 1] + "+"
    else:
        text = ("{0:>" + str(maxlen) + "}").format(text)
    return text

def wrapped(text, width=70, indent=34):
    lines = textwrap.wrap(text, width)
    for i in range(1, len(lines)):
        lines[i] = (" " * indent) + lines[i]
    return "\n".join(lines)

def highlight(text):
    bell = False
    for i in HIGHLIGHTS:
        pat = re.compile("(" + i + ")", re.IGNORECASE)
        if not bell and not pat.search(text) is None:
            bell = True
        text = pat.sub(C["reversed"] + C["yellow"] + r"\1" + C["reset"],
                       text)
    if bell:
        sys.stdout.write("\a")
    return text

def catch_links(text):
    text = text.replace("\r", "")
    text = text.replace("\n", "")
    with open("/tmp/links.log", "a") as fp:
        for i in re.findall(r'https?://[^ )]+', text, re.I):
            print >> fp, i

def save_paste(fmt_user, message):
    if not os.path.exists("/tmp/campfire"):
        os.mkdir("/tmp/campfire")

    user = re.sub(r'[^a-z0-9]', "_", message.user.name.lower())
    filename = "/tmp/campfire/%s--%s" % (user, message.get_data()["id"])

    show(message, "%s: %s pasted %s" % (S["***"], fmt_user, filename))

    with open(filename, "w") as fp:
        fp.write(message.body.encode("UTF-8"))

    print "---------------------------------"
    print message.body
    print "---------------------------------"

def proc_message(message, hide_joinpart=False, hide_unknown=False):
    user = ""
    if message.user:
        user = colored_name(trim_len(message.user.name))
    shown = False

    if not hide_joinpart and message.is_joining():
        show(message, "%s: %s" % (S["-->"], user))
        shown = True
        current_users.append(message.user.name)
    elif not hide_joinpart and message.is_leaving():
        show(message, "%s: %s" % (S["<--"], user))
        shown = True
        current_users.remove(message.user.name)
    elif not hide_joinpart and message.is_kick():
        show(message, "%s: %s timed out" % (S["<--"], user))
        shown = True
        current_users.remove(message.user.name)
    elif message.is_tweet():
        catch_links(message.tweet["url"])
        show(message, "%s: %s tweeted '%s' - %s" % (user,
                                                    message.tweet["user"],
                                                    message.tweet["tweet"],
                                                    message.tweet["url"]))
        shown = True
    elif message.is_text():
        catch_links(message.body)
        if message.is_paste():
            save_paste(user, message)
        else:
            show(message, "%s: %s" % (user, highlight(wrapped(message.body))))
        shown = True
    elif message.is_upload():
        catch_links(message.upload["url"])
        show(message, "%s: %s uploaded file %s: %s" % (S["***"],
                                                       user,
                                                       message.upload["name"],
                                                       message.upload["url"]))
        shown = True
    elif message.is_topic_change():
        show(message, "%s: %s changed topic to '%s'" % (S["***"],
                                                        user,
                                                        message.body))
        shown = True
    elif message.is_timestamp():
        pass
    elif not hide_unknown:
        show(message, "[unknown message type] %s" % message.type)
        d = message.get_data()
        for i in d.keys():
            print "\t'%s' = '%s'" % (i, d[i])
        shown = True

    return shown

def list_users(room, full=False):
    users = [i["name"] for i in room.get_users()]
    print ""
    if full:
        print "Users in room: %s" % ", ".join(users)
    else:
        print "Users in room: %s" % ", ".join([colored_name(trim_len(i))
                                               for i in users])
    print ""
    return users

def name_completion(user_input):
    m = re.match(r'^@([^:]+): (.*)', user_input)
    if m is None:
        return user_input

    names = m.groups()[0].split(",")
    message = m.groups()[1]

    out = ""

    if len(names) == 1 and names[0] == "ALL":
        for s in current_users:
            if s != own_username:
                out += "@" + s + ", "
    else:
        for n in names:
            for s in current_users:
                if s.lower().startswith(n.lower()) and s != own_username:
                    out += "@" + s + ", "
    out += message
    return out

def list_uploads(room):
    print ""
    print "Uploads:"
    for u in room.get_uploads():
        catch_links(u["full_url"])
        print "\t%s" % u["name"]
        print "\t%s" % u["full_url"]
        print ""
    print ""

def list_rooms(campfire):
    print ""
    print "Rooms: %s" % ", ".join([i["name"] for i in campfire.get_rooms()])
    print ""

def upload_progress(current, total):
    print "Uploading %d out of %d (%-.1f%%)" % (current, total,
                                                100 * (float(current)
                                                       / float(total)))
    print ""

def upload_finished():
    print "Upload finished."
    print ""

def upload_new(room, filename):
    room.upload(os.path.expanduser(filename),
                progress_callback=upload_progress,
                finished_callback=upload_finished,
                error_callback=error).start()

def paste_file(room, filename):
    with open(os.path.expanduser(filename), "r") as fp:
        room.speak(fp.read())

def paste_x(room):
    room.speak(os.popen("xclip -o").read())

def leave(stream, room):
    stream.stop().join()
    room.leave()
    print ""
    print "Room left. You may close this window now."
    print ""

def quit(pipe_name, ret=0):
    os.unlink(pipe_name)
    sys.exit(ret)

def error(e, room):
    print "\"%s\" error: %s" % (room.name, e)

def show_help():
    print ""
    print "/users       List users in the current room."
    print "/users_full  Likewise but don't shorten names."
    print "/rooms       List all rooms."
    print "/uploads     List uploads in the current room."
    print "/send $f     Upload a file."
    print "/pastef $f   Paste a file."
    print "/pastex      Paste from X11 clipboard."
    print "/leave       Leave the room."
    print ""


C = {
     "reset":    "\033[0m",
     "bold":     "\033[1m",
     "reversed": "\033[7m",

     "black":   "\033[30m",
     "red":     "\033[31m",
     "green":   "\033[32m",
     "yellow":  "\033[33m",
     "blue":    "\033[34m",
     "magenta": "\033[35m",
     "cyan":    "\033[36m",
     "white":   "\033[37m",

     "bright_black":   "\033[1;30m",
     "bright_red":     "\033[1;31m",
     "bright_green":   "\033[1;32m",
     "bright_yellow":  "\033[1;33m",
     "bright_blue":    "\033[1;34m",
     "bright_magenta": "\033[1;35m",
     "bright_cyan":    "\033[1;36m",
     "bright_white":   "\033[1;37m",
    }

NICK_COLORS = ["red", "green", "yellow", "blue", "magenta", "cyan", "white",
               "bright_red", "bright_green", "bright_yellow", "bright_blue",
               "bright_magenta", "bright_cyan", "bright_white"]

S = {
     "<--": C["red"] + trim_len("<-- ") + C["reset"],
     "-->": C["blue"] + trim_len("--> ") + C["reset"],
     "***": C["magenta"] + trim_len("*** ") + C["reset"],
    }


if __name__ == "__main__":
    with open(os.path.expanduser("~/.ttyfire"), "r") as fp:
        config = [i.strip() for i in fp.readlines()]

    HIGHLIGHTS = config[3].split(";")

    pipe_name = sys.argv[1]
    room_name = sys.argv[2]

    if not os.path.exists(pipe_name):
        os.mkfifo(pipe_name)

    campfire = pyfire.Campfire(config[0], config[1], config[2], ssl=True)
    room = campfire.get_room_by_name(room_name)
    room.join()

    for o in range(7, -1, -1):
        when = datetime.date.today() - datetime.timedelta(o)
        messages_shown = 0
        for i in room.transcript(for_date=when):
            if proc_message(i, hide_joinpart=True, hide_unknown=True):
                messages_shown += 1
        if messages_shown > 0:
            print ""

    current_users = list_users(room)
    own_username = campfire._user.get_data()["name"]

    stream = room.get_stream(error_callback=error)
    stream.attach(proc_message).start()

    while True:
        with open(pipe_name, "r") as pipe:
            lines = [i.decode("UTF-8").strip() for i in pipe.readlines()]
            for cmd in lines:
                if cmd == "/leave":
                    leave(stream, room)
                    quit(pipe_name)
                elif cmd == "/users":
                    list_users(room)
                elif cmd == "/users_full":
                    list_users(room, full=True)
                elif cmd == "/uploads":
                    list_uploads(room)
                elif cmd.startswith("/send "):
                    upload_new(room, cmd[6:])
                elif cmd.startswith("/pastef "):
                    paste_file(room, cmd[8:])
                elif cmd == "/pastex":
                    paste_x(room)
                elif cmd == "/rooms":
                    list_rooms(campfire)
                elif cmd.startswith("/"):
                    show_help()
                else:
                    room.speak(name_completion(cmd))

# vim: set ts=4 sw=4 et sta :
